import packages to your pubspec.yaml file : 

-> file_picker: ^4.6.1
-> open_file: ^3.2.1

/// this function call in onTap to you need 

getFilePieckerSetup() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowMultiple: true,
      allowedExtensions: ['jpg', 'pdf', 'doc','jpeg'],
    );
    if (result != null) {
      var filePath = result.files;
      print("file path is :" + filePath.toString());
      openFilesData(filePath );

    }
  }

  openFilesData(List<PlatformFile> filesData) {
    Navigator.of(context).push(MaterialPageRoute(builder: (_) => StudentClassWorkSubmitPage(files: filesData,onOpenFile: openFile,)));
  }

  openFile(PlatformFile file) {
    OpenFile.open(file.path!);
  }
  
  
  
  ///this is code import to show screen page
  
  import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:open_file/open_file.dart';

import '../../../utils/colors_data.dart';

class StudentClassWorkSubmitPage extends StatefulWidget {
  List<PlatformFile>? files;
  ValueChanged<PlatformFile>? onOpenFile;
   StudentClassWorkSubmitPage({this.files,this.onOpenFile});

  @override
  State<StudentClassWorkSubmitPage> createState() => _StudentClassWorkSubmitPageState();
}

class _StudentClassWorkSubmitPageState extends State<StudentClassWorkSubmitPage> {
  @override
  Widget build(BuildContext context) {
    return

      Scaffold(
      body:
      Center(
        child: GridView.builder(
          shrinkWrap: true,
            itemCount: widget.files!.length,
            gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
              childAspectRatio: 16/20, maxCrossAxisExtent: 250,mainAxisSpacing: 20,crossAxisSpacing: 10

                ),
            itemBuilder: (context, index) {
              final file = widget.files![index];
              final kb = file.size / 1024;
              final mb =kb/1024;
              final fileSize = mb >=1 ?"${mb.toStringAsFixed(2)} MB" : "${kb.toStringAsFixed(3)} KB";
              final extension = file.extension ?? "none";
              // print("extednsion : " )
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: GestureDetector(
                  onTap: () {
                    OpenFile.open(file.path);
                  },
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        alignment: Alignment.center,
                        // width: double.infinity,
                        // height: MediaQuery.of(context).size.height * 0.18,
                        decoration: BoxDecoration(
                          color: extension == "pdf" ? Colors.red : extension == "doc" ? Colors.blueAccent : extension == "jpeg" || extension == "jpg" || extension == "png" ? Colors.pinkAccent :Colors.white,
                            borderRadius: BorderRadius.circular(20)
                        ),
                        child: extension == "jpeg" || extension == "jpg" || extension == "png"? Image.file(File(file.path.toString()),fit: BoxFit.fill,width: double.infinity,) : Text(".${extension}",style: TextStyle(fontSize: 26,color: whiteColor,fontWeight: FontWeight.bold),),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 8.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [

                            Text(file.name,style: TextStyle(fontSize: 12,color: blackColor,fontWeight: FontWeight.bold),),
                            const SizedBox(height: 3,),
                            Text(fileSize,style: TextStyle(fontSize: 10,color:blackColor),),

                          ],
                        ),
                      ),

                    ],
                  ),
                ),
              );
            }),
      ),
    );
  }
}
  
  
